{
  "name": "com.unity.services.analytics",
  "displayName": "Analytics",
  "version": "5.1.0",
  "unity": "2019.4",
  "description": "The Unity Analytics package automatically collects core events and user properties when someone uses your game or application, and enables you to track specific in-game actions your user performs by defining custom events. The data collected from this package is surfaced in the Unity dashboard where you can use it to gather user insights, segment your player base and make informed decisions around the optimization of your game.",
  "dependencies": {
    "com.unity.ugui": "1.0.0",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.services.core": "1.10.1"
  },
  "samples": [
    {
      "displayName": "Standard Events",
      "description": "Example of using the predefined standardized products, including a demo scene",
      "path": "Samples~/StandardEvents"
    }
  ],
  "_upm": {
    "gameService": {
      "genericDashboardUrl": "https://dashboard.unity3d.com/analytics",
      "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/events",
      "projectDashboardUrlType": "OrganizationKeyAndProjectGuid",
      "configurePath": "Project/Services/Analytics - Gaming Services"
    },
    "supportedPlatforms": [
      "Android",
      "iOS",
      "Linux",
      "Mac",
      "PC",
      "Windows 8.1 Universal",
      "Windows 10 Universal",
      "WebGL"
    ],
    "changelog": "### Added\n\n* New `RecordEvent(...)` API which takes an instance of the new `Unity.Services.Analytics.Event` class\n  * This enables you to codify custom event schemas in helper objects by making your own sub-classes of `Event`, to avoid the risks inherent in directly using plain dictionaries with string keys\n  * Event objects can also be pooled and reused because they are cleared immediately once their contents have been serialized\n  * A generic `CustomEvent` class is available which can be used in a flexible, dictionary-like way if you do not wish to make your own full sub-classes\n\n### Deprecated\n\n* Standard Event recording methods that take `...Parameters` helper structs are now deprecated. Please replace them with the new `Event` sub-classes and use the new `RecordEvent(...)` method.\n  * TransactionParameters -> TransactionEvent\n  * TransactionFailedParameters -> TransactionFailedEvent\n  * AdImpressionParameters -> AdImpressionEvent\n  * AcquisitionSourceParameters -> AcquisitionSourceEvent\n* CustomData(...) methods\n  * Use RecordEvent(string) for events with no parameters\n  * Use RecordEvent(event) for events with parameters, by using CustomEvent or creating your own sub-class of Event to contain the parameters\n\n### Improved\n\n* Improved the descriptions of some properties on the `AdImpressionParameters` class"
  },
  "relatedPackages": {
    "com.unity.services.analytics.tests": "5.1.0"
  },
  "upmCi": {
    "footprint": "5ba9ee5e831fdf648976967d165bbb706930eced"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.services.analytics@5.1/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/operate-services-sdk.git",
    "type": "git",
    "revision": "13f4887dfc1bf80d30ef84aff0416d2ed0ef2d3b"
  }
}
